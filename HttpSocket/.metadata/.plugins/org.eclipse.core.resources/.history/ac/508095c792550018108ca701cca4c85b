import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;

import org.bytedeco.javacpp.opencv_core;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacv.OpenCVFrameConverter;
import org.bytedeco.javacv.OpenCVFrameGrabber;

import net.sf.json.JSONArray;
 
/**
 * 用socket来收发http协议报文
 */
public class SocketHttp {
    public static void main(String[] args) {
        Thread threadReceive=new Thread(new TestReceiveHttp());
        threadReceive.start();
    }
}
 
class TestReceiveHttp implements Runnable{
    @Override
    public void run() {
        ServerSocket server;
        Socket socket;
        try{
            server=new ServerSocket(8079);
            System.out.println("正在等待8079端口的请求");
            while(true){
                socket=server.accept();
                if(socket!=null){
                    new Thread(new TestReveiveThread(socket)).start();
                }
            }
        }catch (Exception e) {
            System.out.println("异常");
        }
    }
}
 
class TestReveiveThread implements Runnable{
    Socket socket;
    public TestReveiveThread(Socket s) {
        socket=s;
    }
    public void run() {
        try{
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "utf-8"));
            OutputStreamWriter osw = new OutputStreamWriter(socket.getOutputStream(),"utf-8");
            String line=null;
            while(true){
            	line=bufferedReader.readLine();
            	System.out.println(line);
                if(!line.equals("json-array")){
                    continue;
                }
                // json array str here
                line=bufferedReader.readLine();
                List<String> ges_opt = parseJSONWithJSONArray(line);
                while (!samplePicture());
                
            }
        }catch (Exception e) {
            System.out.println("客户端接受异常"+e.getMessage());
        }
    }
    
    // sample a picture from local
	static OpenCVFrameConverter.ToIplImage converter = new OpenCVFrameConverter.ToIplImage();
    static String PICTURE_PATH = "./src/test/now.jpg";
    public static boolean samplePicture() throws Exception, InterruptedException
    {
        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
        grabber.start();   //开始获取摄像头数据
        opencv_core.Mat mat = converter.convertToMat(grabber.grabFrame());
        
        if ( !opencv_imgcodecs.imwrite(PICTURE_PATH, mat)) {
        	System.out.println("Write failed");
        	return false;
        }
        System.out.println("Write success");
        return true;
    }
    
    private List<String> parseJSONWithJSONArray(String jsonData) {
    	List<String> gesture = new ArrayList();
    	try
        {
            JSONArray jsonArray = new JSONArray(jsonData);
            for (int i=0; i < jsonArray.length(); i++)    {
            	gesture.add(jsonArray.get(i).toString());
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    	System.out.println("parse request: " + gesture);
        return gesture;
    }
}